module Reanimate.Typst (typst) where

import Data.ByteString qualified as B
import Data.Text (Text)
import Data.Text.Encoding qualified as T
import System.IO.Unsafe (unsafePerformIO)

import Graphics.SvgTree (Tree, parseSvgFile)
import Reanimate.Cache (cacheDiskSvg, cacheMem)
import Reanimate.Misc (requireExecutable, runCmd, withTempFile)
import Reanimate.Parameters (pNoExternals)
import Reanimate.Svg.Constructors (mkText)
import Reanimate.Svg.Unuse (unbox)

-- | Render Typst source to SVG image.
--
--   Unlike LaTeX, we preserve the group structure, because they correspond to the structure in the
--   input Typst source. This may help avoid the complexities in e.g. 'Reanimate.LaTeX.mathChunks'.
--
--   FIXME: I think later we should add back the simplifications.
typst :: Text -> Tree
typst source | pNoExternals = mkText source
typst source = unsafePerformIO (cacheMem (cacheDiskSvg typstToSvg) source)

-- | Render Typst source to SVG image.
typstToSvg :: Text -> IO Tree
typstToSvg source = do
  typstBin <- requireExecutable "typst"
  withTempFile "typ" $ \typstFile ->
    withTempFile "svg" $ \svgFile -> do
      B.writeFile typstFile (T.encodeUtf8 source)
      runCmd typstBin ["compile", "--format", "svg", typstFile, svgFile]
      svgData <- T.decodeUtf8 <$> B.readFile svgFile
      case parseSvgFile svgFile svgData of
        Nothing  -> fail "invalid SVG generated by Typst"
        Just svg -> pure (unbox svg)
